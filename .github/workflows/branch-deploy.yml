name: branch-deploy

on:
  issue_comment:
    types: [created]

permissions: write-all

jobs:
  rubocop:
    name: runner / rspec
    runs-on: ubuntu-20.04

    env:
      GITHUB_ORG_TOKEN: ${{ secrets.ORG_TOKEN }}

    steps:
      - name: branch-deploy
        id: branch-deploy
        uses: github/branch-deploy@v5.2.2
        
      # Check out the ref from the output of the IssueOps command
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # pin@v3.0.2
        with:
          ref: ${{ steps.branch-deploy.outputs.ref }}

      - name: Get latest commit hash of entitlements-app
        id: latest-commit-hash
        run: |
          echo "::set-output name=hash::$(git ls-remote https://github.com/Ballista-lTD/entitlements-app.git HEAD | cut -f 1)"

      - name: Cache entitlements-app
        id: cache-entitlements-app
        uses: actions/cache@v2
        with:
          path: entitlements-app
          key: entitlements-app-${{ steps.latest-commit-hash.outputs.hash }}

      - name: Clone Entitlements
        if: steps.cache-entitlements-app.outputs.cache-hit != 'true'
        run: git clone https://$GITHUB_ACCESS_TOKEN@github.com/Ballista-lTD/entitlements-app.git entitlements-app
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_ACCESS_TOKEN }}

      - name: Move entitlements-app
        run: mv entitlements-app/* .

      - uses: ruby/setup-ruby@cd4241788aec4fdcd3325da7068efa9b62a017af
        with:
          ruby-version: 2.7.5
          bundler-cache: true

      - name: Cache Ruby gems
        id: cache-ruby-gems
        uses: actions/cache@v2
        with:
          path: |
            vendor/gems
            bin
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-${{ hashFiles('lib/**') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: bootstrap
        if: steps.cache-ruby-gems.outputs.cache-hit != 'true'
        run: script/bootstrap


      # Here we run a deploy. It is "gated" by the IssueOps logic and will only run if the outputs from our branch-deploy step indicate that the workflow should continue
      - name: deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
        run: |
          set -o pipefail
          script/deploy | tee deploy.out
          MSG=$(cat deploy.out)
          MSG="\`\`\`output\n${MSG}\n\`\`\`"
          echo 'DEPLOY_MESSAGE<<EOF' >> $GITHUB_ENV
          echo "$MSG" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
